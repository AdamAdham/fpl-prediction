import optuna
import torch
import torch.nn as nn
from torch.utils.data import DataLoader, TensorDataset
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np

# --- Preprocessing (same as your setup) ---
drop_cols = [
    'team_x_next', 'opp_team_name_next', 'kickoff_time_next',
    'kickoff_time', 'kickoff_time_opp', 'season_x', 
    'team_x', 'GW', 'GW_next'
]

df = merged_df.drop(columns=drop_cols, errors='ignore')
df['was_home_next'] = df['was_home_next'].map({'True': 1, 'False': 0, True: 1, False: 0}).fillna(0)
df = df.fillna(df.median(numeric_only=True))

y = df['upcoming_total_points'].values
X = df.drop(columns=['upcoming_total_points']).select_dtypes(include=[np.number]).values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train_t = torch.tensor(X_train, dtype=torch.float32)
X_test_t = torch.tensor(X_test, dtype=torch.float32)
y_train_t = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)
y_test_t = torch.tensor(y_test, dtype=torch.float32).view(-1, 1)

# --- Define a model class parameterized by Optuna suggestions ---
class FFNN(nn.Module):
    def __init__(self, input_dim, hidden_dims, dropout_rate):
        super(FFNN, self).__init__()
        layers = []
        prev_dim = input_dim
        for h in hidden_dims:
            layers.append(nn.Linear(prev_dim, h))
            layers.append(nn.ReLU())
            layers.append(nn.Dropout(dropout_rate))
            prev_dim = h
        layers.append(nn.Linear(prev_dim, 1))
        self.net = nn.Sequential(*layers)
        
    def forward(self, x):
        return self.net(x)

# --- Objective function for Optuna ---
def objective(trial):
    # Suggest hyperparameters
    n_layers = trial.suggest_int("n_layers", 2, 4)
    hidden_dims = [trial.suggest_int(f"n_units_l{i}", 64, 512) for i in range(n_layers)]
    dropout_rate = trial.suggest_float("dropout_rate", 0.1, 0.5)
    lr = trial.suggest_float("lr", 1e-4, 1e-2, log=True)
    batch_size = trial.suggest_categorical("batch_size", [32, 64, 128])
    
    # Model, optimizer, loss
    model = FFNN(X_train.shape[1], hidden_dims, dropout_rate)
    criterion = nn.MSELoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=lr)
    
    # DataLoader
    train_data = TensorDataset(X_train_t, y_train_t)
    train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True)
    
    # Train for limited epochs
    model.train()
    for epoch in range(20):  # fewer epochs for search
        total_loss = 0
        for xb, yb in train_loader:
            optimizer.zero_grad()
            preds = model(xb)
            loss = criterion(preds, yb)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
    
    # Validation
    model.eval()
    with torch.no_grad():
        preds = model(X_test_t)
        mse = criterion(preds, y_test_t).item()
    return mse

# --- Run Optuna study ---
study = optuna.create_study(direction="minimize")
study.optimize(objective, n_trials=30)

print("\nBest Trial:")
print(study.best_trial.params)

# --- Retrain best model ---
best_params = study.best_trial.params
best_hidden = [best_params[f"n_units_l{i}"] for i in range(best_params["n_layers"])]
model = FFNN(X_train.shape[1], best_hidden, best_params["dropout_rate"])
criterion = nn.MSELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=best_params["lr"])
train_data = TensorDataset(X_train_t, y_train_t)
train_loader = DataLoader(train_data, batch_size=best_params["batch_size"], shuffle=True)

epochs = 40
for epoch in range(epochs):
    model.train()
    total_loss = 0
    for xb, yb in train_loader:
        optimizer.zero_grad()
        preds = model(xb)
        loss = criterion(preds, yb)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    print(f"Epoch [{epoch+1}/{epochs}], Loss: {total_loss/len(train_loader):.4f}")

# --- Evaluate final model ---
model.eval()
with torch.no_grad():
    preds = model(X_test_t)
    mse = criterion(preds, y_test_t).item()
    rmse = np.sqrt(mse)
    print(f"\nFinal RMSE after HPO: {rmse:.4f}")
